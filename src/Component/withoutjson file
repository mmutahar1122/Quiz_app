import React, { useState,useEffect } from "react";
import "./style.css";
import { useDispatch } from "react-redux";
import { start_Quiz,Selecte_Option,Submit_Ans,Goto_Next,API_Data } from "../functionSlices/Slices";
import { useSelector } from "react-redux";
import { Data } from "./Ques/Ans";
const InputFields = () => {
  const [currentIndex,setCurrentIndex]=useState(0)
  const [onlyscore,setOnlyScore]=useState();
  const [ApiData,setApiData]=useState()
  const [randomNum,setRandumNum]=useState();

  // const Jdata=;
useEffect(()=>{
  dispatch(API_Data(Data))

},[])
  // dispatch(Jdata);

// console.log('Jdata',Jdata)
  const correctAnswer=ApiData && ApiData[0]?.correct_answer;
  const dispatch=useDispatch();
  const GEnerateRAndumNum=()=>{
    const Random=Math.floor(Math.random()*4 + 1);
    setRandumNum(Random);
  }

const {start,changeButton,isCorrect,isWrong,score,questionNo,data}=useSelector((state)=>state.functions);
const SeletesOption=useSelector((state)=>state.functions.selectedOption.id);
const DisAble=useSelector((state)=>state.functions.isDisable);
  useEffect(() => {
    const fetchData = async () => {
      try {
      const url =`https://opentdb.com/api.php?amount=1&category=9&difficulty=medium&type=multiple`
      const response = await fetch(url);
      const data = await response.json();
      setApiData(data.results);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };
  fetchData();
}, [currentIndex]);



const startQuiz = () => {
  dispatch(start_Quiz(true));
  GEnerateRAndumNum();
  console.log('data',data[0]);
  console.log('data.answer',data[0].answer);
  console.log('data.options',data[0].options);
  console.log('data.question',data[0].question);
  console.log('data.id',data[0].id);
};
const SelecteOption = (value,id) => {
  
  if(DisAble){
    dispatch(Selecte_Option({value,id}))
  };};
  const submitAns=(e)=>{
    e.preventDefault();
    dispatch(Submit_Ans({correctAnswer,randomNum}));
    
  }
  const GotoNext=()=>{
    dispatch(Goto_Next());
    if(currentIndex >= 0 && currentIndex < 10){
    setCurrentIndex(currentIndex + 1);
    GEnerateRAndumNum();
  }
  if(currentIndex === 9){
    setCurrentIndex(currentIndex + 1) ;
    setOnlyScore(currentIndex + 1)
  }
  }
  return (
    <>
      <header id="header">
        <h1> Quiz App </h1>
        <div id="score_in_header">
          <div className="header_button">Score:{score}</div>
          <div className="header_button" id="next_level">
            <button id="next_level" 
             onClick={(e)=>GotoNext(e)}
              disabled={!isCorrect}>Next Level</button>
          </div>
        </div>
      </header>
      <div id={`${ onlyscore ? 'AllNone' :start === true ? "Main" : "Main_Welcome_only"}`}>
        <div id={`${start === true ? "welcome_Msg" : "welcome_Msg-only"}`}>
          <h1>
            Welcome To
            <br/><span>Quiz App</span>
          </h1>
        </div>
        <div id={`${start === true ? "form-Container" : "form-Container-None"}`}>
          <form id="myForm">
            <h1>Quiz App</h1>
            <div id="Question">
              {" "}
              <div>Q:{questionNo})</div>
               {ApiData && ApiData[0]?.question}
            </div>
             <div 
             className={`${isCorrect=== 1 ? 'BG_Green' : SeletesOption === 1
              ? 'Dull_Blue':'Answer'}`}  
             id={`${isWrong === 1 ? 'BG_Red' : 'Answer'}`} 
              onClick={() => SelecteOption(randomNum === 1 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0]?.incorrect_answers[0],1)}>
              <div>a)</div>{randomNum === 1 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0]?.incorrect_answers[0]}
            </div>
            <div 
            className={`${isCorrect === 2 ? 'BG_Green': SeletesOption === 2 ? 'Dull_Blue': 'Answer'}`} 
            id={`${isWrong === 2 ? 'BG_Red' : 'Answer'}`}
            onClick={() => SelecteOption(randomNum === 2 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0]?.incorrect_answers[1],2)}>
              <div>b)</div>{ randomNum === 2 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0]?.incorrect_answers[1]}
            </div>
            <div 
            className={`${isCorrect === 3 ? 'BG_Green': SeletesOption === 3 ? 'Dull_Blue': 'Answer'}`} 
            id={`${isWrong === 3 ? 'BG_Red' : 'Answer'}`} 
            onClick={() => SelecteOption(randomNum === 3 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0] ?.incorrect_answers[2],3)}>
              <div>c)</div>{randomNum === 3 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0] ?.incorrect_answers[2]}
            </div>
            <div 
            className={`${isCorrect === 4 ? 'BG_Green': SeletesOption === 4 ? 'Dull_Blue': 'Answer'}`} 
            id={`${isWrong === 4 ? 'BG_Red' : 'Answer'}`} 
            onClick={() => SelecteOption(randomNum === 4 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0] ?.incorrect_answers[0],4)}>
              {" "}
              <div>d)</div>{randomNum === 4 ? ApiData && ApiData[0]?.correct_answer : ApiData && ApiData[0] ?.incorrect_answers[0]}
            </div>
            <div
              id={`${
                start === true ? "submit_btn-container" : "submit_btn-container-only"
              }`}
            >
              {changeButton ? <button 
              id="submit"
              className="submit_btn"
              onClick={(e)=>GotoNext(e)}
              disabled={!SeletesOption}
              >
                Next
              </button>
              :
              !changeButton ? <button
                id="submit"
                className="submit_btn"
                onClick={(e)=>{submitAns(e)}}
                disabled={!SeletesOption}>
                Check
              </button> : ''}
            </div>
          </form>
        </div>

        <div id={`${start === true ? "score_Container" : "score_Container-None"}`}>
          <div id="score_Container_child">
            <div id="score">Score : {score}</div>
          </div>
        </div>
        <div
          id={`${start === true ? "start_Container-None" : "start_Container"}`}
        >
          {" "}
          <button onClick={startQuiz}>Start</button>
        </div>
      </div>
      <div id={`${currentIndex > 9 ? "FinalScoreOnly":"FinalScore"}`}> 
      <div id='FinalScoreChildren'>
     You Got :{score} Score
     </div>
      </div>
      
    </>
  );
};

export default InputFields;

