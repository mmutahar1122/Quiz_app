import React, { useState,useEffect } from "react";
import "./style.css";
import { Data } from "./Ques/Ans";

const InputFields = () => {
  const [isCorrect,setIsCorrect]=useState();
  const [isWrong,setIsWrong]=useState();
  const [start, setStart] = useState();
  const [DAta,SetDAta]=useState(Data);
  const [filterData,setfilterData]=useState();
  const [currentIndex,setCurrentIndex]=useState(0)
  const [score,setScore]=useState(0);
  const [selectedOption,setSelectedOption]=useState()
  const [onlyscore,setOnlyScore]=useState();
  const [changeButton,setChangeButton]=useState(false);
const [isDisable,setIsDisable]=useState(true)
const[Page,setPage]=useState(0);
const [ApiData,setApiData]=useState()

console.log('ApiData',ApiData);
 useEffect(() => {
  const fetchData = async () => {
    try {
      // const url = `https://the-trivia-api.com/v2/questions/?page=${Page}&limit=1`; 
      const url =`https://opentdb.com/api.php?amount=3&category=9&difficulty=medium&type=multiple`
      const response = await fetch(url);
      const data = await response.json();
      setApiData(data.results);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  fetchData();
}, [currentIndex]);


  const submitAns=(e)=>{
    e.preventDefault();
    setSelectedOption('');
    setIsCorrect(DAta[currentIndex - 1].answer);
    if(ApiData && ApiData[currentIndex].correct_answer !== selectedOption){
      setIsWrong(selectedOption);
    }if(DAta[currentIndex - 1].answer === selectedOption){
      setScore(score + 5);
    }
    setChangeButton(true);
    setIsDisable(false)
  }
  const startQuiz = () => {
// console.log('ApiData.wronganswer :::',ApiData[0].incorrectAnswers);
console.log('ApiData.[currentIndex] :::',ApiData && ApiData[currentIndex]);
    setStart(!start);
    setCurrentIndex(currentIndex + 1);
    const CurrentDAta=Data[currentIndex];
    setApiData(CurrentDAta);
  setPage(Page + 1);

  };
  const SelectedOption = (value,id) => {
    console.log('value',value)
  if(isDisable){
    setSelectedOption(value,id);
  };};
  const GotoNext=()=>{
  if(currentIndex >= 0 && currentIndex < DAta.length){
    const CurrentDAta=Data[currentIndex];
    setApiData(CurrentDAta);
    setCurrentIndex(currentIndex + 1);
    setIsWrong('');
    setIsCorrect('');
  }
  if(currentIndex === DAta.length){
    setCurrentIndex(currentIndex + 1) ;
    setOnlyScore(currentIndex + 1)

  }
  setChangeButton(false)
  setIsDisable(true)
  setPage(Page + 1);
  }
  return (
    <>
      <header id="header">
        <h1> Quiz App </h1>
        <div id="score_in_header">
          <div className="header_button">Score:{score}</div>
          <div className="header_button" id="next_level">
            <button id="next_level" 
             onClick={(e)=>GotoNext(e)}
              disabled={!isCorrect}>Next Level</button>
          </div>
        </div>
      </header>
      {/* <h1>{ApiData && ApiData[0]?.question.text}</h1> */}
      <div id={`${ onlyscore ? 'AllNone' :start ? "Main" : "Main_Welcome_only"}`}>
        <div id={`${start ? "welcome_Msg" : "welcome_Msg-only"}`}>
          <h1>
            Welcome To
            <br /> <span> Quiz App </span>
          </h1>
        </div>
        <div id={`${start ? "form-Container" : "form-Container-None"}`}>
          <form id="myForm">
            <h1>Quiz App</h1>
            <div id="Question">
              {" "}
              <div>Q:{ApiData && ApiData[currentIndex]?.id})</div>
               {ApiData && ApiData[currentIndex]?.question}
            </div>
           
             <div 
             className={`${isCorrect === 1 ? 'BG_Green' : selectedOption === 1 ? 'Dull_Blue': 'Answer'}`}  
             id={`${isWrong === 1 ? 'BG_Red' : 'Answer'}`} 
              onClick={() => SelectedOption(ApiData &&  ApiData[currentIndex]?.correct_answer,1)}
              >
              <div>a)</div>{ApiData && ApiData[currentIndex]?.correct_answer}
            </div>
            <div 
            className={`${isCorrect === 2 ? 'BG_Green': selectedOption === 2 ? 'Dull_Blue': 'Answer'}`} 
            id={`${isWrong === 2 ? 'BG_Red' : 'Answer'}`}onClick={() => SelectedOption(ApiData && ApiData[currentIndex]?.incorrect_answers[0],2)}>
              <div>b)</div>{ApiData && ApiData[currentIndex]?.incorrect_answers[0]}
            </div>
            <div 
            className={`${isCorrect === 3 ? 'BG_Green': selectedOption === 3 ? 'Dull_Blue': 'Answer'}`} 
            id={`${isWrong === 3 ? 'BG_Red' : 'Answer'}`} onClick={() => SelectedOption(ApiData && ApiData[currentIndex]?.incorrect_answers[1],3)}>
              <div>c)</div>{ApiData && ApiData[currentIndex]?.incorrect_answers[1]}
            </div>
            <div 
            className={`${isCorrect ===4 ? 'BG_Green': selectedOption === 4 ? 'Dull_Blue': 'Answer'}`} 
            id={`${isWrong ===4 ? 'BG_Red' : 'Answer'}`} onClick={() => SelectedOption(ApiData && ApiData[currentIndex]?.incorrect_answers[2],4)}>
              {" "}
              <div>d)</div>{ApiData && ApiData[currentIndex]?.incorrect_answers[2]}
            </div>
            <div
              id={`${
                start ? "submit_btn-container" : "submit_btn-container-only"
              }`}
            >
              {changeButton ? <button 
              // id="Next_Level_button" 
              id="submit"
              className="submit_btn"
              onClick={(e)=>GotoNext(e)}
              disabled={!isCorrect}
              >
                Next
              </button>
              :
              !changeButton ? <button
                id="submit"
                className="submit_btn"
                onClick={(e)=>{submitAns(e)}}
                disabled={!selectedOption}>
                Check
              </button> : ''}
            </div>
          </form>
        </div>

        <div id={`${start ? "score_Container" : "score_Container-None"}`}>
          <div id="score_Container_child">
            <div id="score">Score : {score}</div>
            <div>
              <button id="Next_Level_button" 
              onClick={(e)=>GotoNext(e)}
              disabled={!isCorrect}
              >
                Next
              </button>
            </div>
          </div>
        </div>
        <div
          id={`${start ? "start_Container-None" : "start_Container"}`}
        >
          {" "}
          <button onClick={startQuiz}>Start</button>
        </div>
      </div>
      <div id={`${currentIndex > DAta.length ? "FinalScoreOnly":"FinalScore"}`}> 
      <div id='FinalScoreChildren'>
     You Got :{score}
     </div>
      </div>
    </>
  );
};

export default InputFields;



// import React, { useState, useEffect } from 'react';

// function TriviaComponent() {
//     const [currentIndex, setCurrentIndex] = useState(0); // Starting index
//     const [currentQuestion, setCurrentQuestion] = useState(null);
    
//     useEffect(() => {
//         // Assuming the API supports an endpoint that fetches a single question by index or ID
//         const url = `https://the-trivia-api.com/v2/questions/${currentIndex}`;
        
//         fetch(url)
//             .then(response => {
//                 if (!response.ok) {
//                     throw new Error(`HTTP error! Status: ${response.status}`);
//                 }
//                 return response.json();
//             })
//             .then(data => {
//                 setCurrentQuestion(data);
//             })
//             .catch(error => {
//                 console.error('There was a problem with the fetch:', error);
//             });
//     }, [currentIndex]);

//     const handleNextQuestion = () => {
//         setCurrentIndex(prevIndex => prevIndex + 1);
//     };

//     return (
//         <div>
//             {/* Render the current question */}
//             {currentQuestion && <p>{currentQuestion.text}</p>}
            
//             {/* Button to fetch the next question */}
//             <button onClick={handleNextQuestion}>Next Question</button>
//         </div>
//     );
// }

// export default TriviaComponent;
